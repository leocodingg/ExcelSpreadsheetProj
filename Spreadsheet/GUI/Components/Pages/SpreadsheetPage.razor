@namespace GUI.Client.Pages
@page "/sheets"
@using System.Diagnostics
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Spreadsheet</PageTitle>

<div class="toolbar">
    <span class="cell-info">
        <label>Cell: </label>
        <input @bind="currentSelectedCell" readonly class="cell-name-input"/>
        <label>Value: </label>
        <input @bind="currentValue" readonly class="cell-value-input"/>
    </span>
    <span class="cell-editor">
        <label>Formula: </label>
        <input @ref="textArea" value="@currentContents" @onchange="CellContentChanged" class="cell-content-input"/>
        <button class="btn btn-secondary" @onclick="UndoOperation">Undo</button>
    </span>
    <span class="file-operations">
        <button class="btn btn-primary" @onclick="SaveFile">Save</button>
        <label class="btn btn-info file-upload">
            <span>Load</span>
            <InputFile OnChange="HandleFileChooser" class="hidden-input" />
        </label>
    </span>
</div>

<div class="spreadsheet-container">
    @if (ShowError)
    {
        <div class="error-modal">
            <div class="error-content">
                <div class="error-header">
                    <h4>Error</h4>
                </div>
                <div class="error-body">
                    <p>@ErrorMessage</p>
                </div>
                <div class="error-footer">
                    <button class="btn btn-danger" @onclick="DismissError">Close</button>
                </div>
            </div>
        </div>
    }
    <div class="table-container">
        <div class="scrollable">
            <table class="table table-bordered">
                <thead>
                <tr class="fixed-header">
                    <th scope="col">&nbsp;</th>
                    @for (int col = 0; col < COLS; col++)
                    {
                        <th scope="col">@Alphabet[col]</th>
                    }
                </tr>
                </thead>

                <tbody>
                @for (int row = 0; row < ROWS; row++)
                {
                    <tr style="padding:0px !important;">
                        <th style="padding:0px !important;" scope="row" class="fixed-column">@(row + 1)</th>
                        @for (int col = 0; col < COLS; col++)
                        {
                            int r = row;
                            int c = col;
                            string cellName = $"{Alphabet[c]}{r+1}";
                            string cellClass = cellName == currentSelectedCell ? "spreadcell selected" : "spreadcell";

                            <td @onclick="() => CellClicked(r, c)" style="padding:0px !important;">
                                <p class="@cellClass">@CellsBackingStore[r, c]</p>
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .toolbar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .cell-info, .cell-editor, .file-operations {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .cell-name-input {
        width: 60px;
        text-align: center;
    }

    .cell-value-input {
        width: 150px;
    }

    .cell-content-input {
        width: 250px;
    }

    .file-upload {
        position: relative;
        overflow: hidden;
    }

    .hidden-input {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
    }

    .spreadsheet-container {
        position: relative;
    }

    .error-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .error-content {
        background-color: white;
        border-radius: 5px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .error-header {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 15px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    .error-body {
        padding: 15px;
        color: #721c24;
    }

    .error-footer {
        padding: 10px 15px;
        text-align: right;
        border-top: 1px solid #f8d7da;
    }

    .spreadcell {
        width: 150px;
        height: 40px;
        margin: 0;
        padding: 8px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .spreadcell.selected {
        background-color: #e8f4f8;
        font-weight: bold;
    }

    .table-container {
        overflow-x: auto;
    }

    .fixed-header {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .fixed-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .scrollable {
        white-space: nowrap; /* Ensures no line breaks within cells */
        width: 1000px;
        height: 500px;
        margin: -1px;
        overflow: auto;
    }

    table {
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #dee2e6;
    }
</style>

<script type="text/javascript">
    function focusElement(id) {
        console.log(`looking for: ${id}`);
        var element = document.getElementById(id);
        if (element) {
            console.log(`focusing element: ${id} ${element}`)
            element.focus();
        }
    }

    window.addKeyPressListener = function (dotNetObject) {
        console.log("registering key press event handler");
        document.addEventListener('keydown', function (event) {
            console.log(`got key: ${event.key}`);
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
                event.preventDefault(); // Prevent arrow keys from scrolling
            }
            dotNetObject.invokeMethodAsync('HandleKeyPress', event.key);
        });
    };

    function downloadFile(fileName, fileContent) {
        console.log(`download file ${fileName}`);
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: "text/plain" });

        // Create a link element
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;

        // Append the anchor element to the body
        document.body.appendChild(a);

        // Click the link to trigger download
        a.click();

        // Remove the anchor element from the DOM
        document.body.removeChild(a);
    }
</script>